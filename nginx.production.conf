# ===========================================
# Nginx Production Configuration for Sochi Travel
# Optimized for HTTP/3, SSL, Performance & Security (2025)
# ===========================================

# Main context
user nginx;
worker_processes auto;
worker_rlimit_nofile 65535;
pid /var/run/nginx.pid;

# Load dynamic modules for HTTP/3 and performance
load_module modules/ngx_http_quic_module.so;
load_module modules/ngx_stream_quic_module.so;

# Events context
events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

# HTTP context
http {
    # ===========================================
    # Basic Settings
    # ===========================================
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Charset
    charset utf-8;
    
    # Server tokens
    server_tokens off;
    
    # ===========================================
    # Performance Optimizations
    # ===========================================
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    types_hash_max_size 2048;
    client_max_body_size 100M;
    client_body_buffer_size 128k;
    client_header_buffer_size 3m;
    large_client_header_buffers 4 256k;
    
    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # ===========================================
    # HTTP/3 Configuration
    # ===========================================
    # Enable HTTP/3 (QUIC)
    # Note: Requires nginx compiled with --with-http_v3_module
    # and OpenSSL with QUIC support
    
    # ===========================================
    # Compression
    # ===========================================
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        application/rss+xml
        application/ld+json
        application/manifest+json
        image/svg+xml
        image/x-icon
        font/woff
        font/woff2
        application/font-woff
        application/font-woff2;
    
    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types
    #     text/plain
    #     text/css
    #     application/json
    #     application/javascript
    #     text/xml
    #     application/xml
    #     application/xml+rss
    #     text/javascript
    #     image/svg+xml;
    
    # ===========================================
    # Security Headers (2025 Best Practices)
    # ===========================================
    # Security headers map
    map $sent_http_content_type $security_headers {
        default "always";
        ~*text/html "always";
        ~*text/css "always";
        ~*text/javascript "always";
        ~*application/javascript "always";
    }
    
    # ===========================================
    # Rate Limiting
    # ===========================================
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=upload:10m rate=2r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=30r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=conn_limit_per_ip:10m;
    
    # ===========================================
    # Upstream Configuration
    # ===========================================
    upstream api_backend {
        server api:4000 max_fails=3 fail_timeout=30s;
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # ===========================================
    # Logging
    # ===========================================
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'rt=$request_time uct="$upstream_connect_time" '
                    'uht="$upstream_header_time" urt="$upstream_response_time"';
    
    log_format security '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        'blocked_by="$sent_http_x_blocked_by"';
    
    access_log /var/log/nginx/access.log main;
    error_log /var/log/nginx/error.log warn;
    
    # ===========================================
    # SSL Configuration (2025 Best Practices)
    # ===========================================
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # OCSP Stapling
    ssl_trusted_certificate /etc/ssl/certs/ca-bundle.crt;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # ===========================================
    # HTTP Server (Redirect to HTTPS)
    # ===========================================
    server {
        listen 80;
        listen [::]:80;
        server_name _;
        
        # Security headers
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        
        # Let's Encrypt ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/certbot;
        }
        
        # Redirect all HTTP traffic to HTTPS
        location / {
            return 301 https://$host$request_uri;
        }
    }
    
    # ===========================================
    # HTTPS Server
    # ===========================================
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        
        # HTTP/3 (QUIC) - requires nginx with QUIC support
        # listen 443 http3 reuseport;
        # listen [::]:443 http3 reuseport;
        
        server_name yourdomain.com www.yourdomain.com;
        
        # SSL Configuration
        ssl_certificate /etc/ssl/certs/yourdomain.com.crt;
        ssl_certificate_key /etc/ssl/private/yourdomain.com.key;
        
        # Security headers (2025 Best Practices)
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header X-Frame-Options DENY always;
        add_header X-Content-Type-Options nosniff always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy strict-origin-when-cross-origin always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        
        # Content Security Policy
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.google-analytics.com https://www.googletagmanager.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https: blob:; connect-src 'self' ws: wss: https:; media-src 'self' https:; object-src 'none'; base-uri 'self'; form-action 'self'; frame-ancestors 'none';" always;
        
        # Root and index
        root /usr/share/nginx/html;
        index index.html;
        
        # ===========================================
        # Rate Limiting
        # ===========================================
        limit_req zone=general burst=20 nodelay;
        limit_conn conn_limit_per_ip 20;
        
        # ===========================================
        # Static Files with Aggressive Caching
        # ===========================================
        location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|webp|avif)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            add_header X-Cache-Status "STATIC";
            
            # Security headers for static files
            add_header X-Content-Type-Options nosniff always;
            
            # Compression
            gzip_static on;
            
            # Try files
            try_files $uri =404;
        }
        
        # ===========================================
        # API Proxy with Enhanced Security
        # ===========================================
        location /api/ {
            # Rate limiting for API
            limit_req zone=api burst=20 nodelay;
            
            # Proxy configuration
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeouts
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffering
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Cache control
            proxy_cache_bypass $http_upgrade;
            
            # Security headers for API
            add_header X-API-Version "1.0.0" always;
            add_header X-Content-Type-Options nosniff always;
        }
        
        # ===========================================
        # Upload Endpoint with Strict Rate Limiting
        # ===========================================
        location /api/upload {
            limit_req zone=upload burst=5 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Extended timeouts for file uploads
            proxy_connect_timeout 300s;
            proxy_send_timeout 300s;
            proxy_read_timeout 300s;
            
            # Disable buffering for uploads
            proxy_request_buffering off;
            proxy_buffering off;
            
            # Security
            add_header X-Upload-Limit "100MB" always;
        }
        
        # ===========================================
        # Authentication Endpoints with Strict Rate Limiting
        # ===========================================
        location ~ ^/api/(login|register|reset-password) {
            limit_req zone=login burst=5 nodelay;
            
            proxy_pass http://api_backend;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Security headers for auth
            add_header X-Auth-Endpoint "true" always;
            add_header X-Content-Type-Options nosniff always;
        }
        
        # ===========================================
        # Health Check Endpoint
        # ===========================================
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }
        
        # ===========================================
        # Metrics Endpoint (if monitoring enabled)
        # ===========================================
        location /metrics {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://api_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # ===========================================
        # SPA Fallback with Security
        # ===========================================
        location / {
            try_files $uri $uri/ /index.html;
            
            # Cache control for HTML files
            location ~* \.html$ {
                expires 1h;
                add_header Cache-Control "public, must-revalidate";
                add_header X-Cache-Status "HTML";
            }
            
            # Security headers for SPA
            add_header X-SPA-Mode "true" always;
        }
        
        # ===========================================
        # Security: Deny Access to Sensitive Files
        # ===========================================
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ \.(env|log|sql|conf|ini)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # ===========================================
        # Security: Block Common Attack Patterns
        # ===========================================
        location ~* (wp-admin|wp-login|xmlrpc|admin|phpmyadmin) {
            return 444;
        }
        
        # Block SQL injection attempts
        location ~* (union.*select|insert.*into|delete.*from|drop.*table) {
            return 444;
        }
        
        # Block XSS attempts
        location ~* (<script|javascript:|onload=|onerror=) {
            return 444;
        }
        
        # ===========================================
        # Error Pages
        # ===========================================
        error_page 404 /404.html;
        error_page 500 502 503 504 /50x.html;
        
        location = /404.html {
            internal;
            add_header X-Error-Page "404" always;
        }
        
        location = /50x.html {
            internal;
            add_header X-Error-Page "5xx" always;
        }
    }
    
    # ===========================================
    # Additional Security: Block Suspicious Requests
    # ===========================================
    # Block requests with suspicious user agents
    if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
        return 403;
    }
    
    # Block requests with suspicious referers
    if ($http_referer ~* (porn|xxx|adult|casino|gambling)) {
        return 403;
    }
}

# ===========================================
# Stream Context (for TCP/UDP proxying if needed)
# ===========================================
stream {
    # Example: Database connection proxying
    # upstream database {
    #     server mariadb:3306;
    # }
    # 
    # server {
    #     listen 3307;
    #     proxy_pass database;
    #     proxy_timeout 1s;
    #     proxy_responses 1;
    # }
}