# syntax=docker/dockerfile:1.7-labs

# ===========================================
# Multi-stage optimized Dockerfile for Sochi Travel
# ===========================================

# ===========================================
# Stage 1: Base image with common dependencies
# ===========================================
FROM node:22-alpine AS base
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache \
    libc6-compat \
    openssl \
    ca-certificates \
    && rm -rf /var/cache/apk/*

# ===========================================
# Stage 2: Dependencies for both apps
# ===========================================
FROM base AS deps
WORKDIR /app

# Copy package files for dependency resolution
COPY package.json package-lock.json ./
COPY apps/web/package.json ./apps/web/
COPY apps/api/package.json ./apps/api/

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production --ignore-scripts && \
    npm cache clean --force

# ===========================================
# Stage 3: Build dependencies (dev)
# ===========================================
FROM base AS build-deps
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache \
    build-base \
    python3 \
    make \
    g++

# Copy package files
COPY package.json package-lock.json ./
COPY apps/web/package.json ./apps/web/
COPY apps/api/package.json ./apps/api/

# Install all dependencies (including dev)
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# ===========================================
# Stage 4: API Build
# ===========================================
FROM build-deps AS api-builder
WORKDIR /app

# Copy Prisma schema
COPY apps/api/prisma ./apps/api/prisma

# Generate Prisma client
RUN cd apps/api && npx prisma generate

# Copy API source code
COPY apps/api/src ./apps/api/src
COPY apps/api/tsconfig.json ./apps/api/
COPY tsconfig.json ./

# Build API
RUN cd apps/api && npm run build

# ===========================================
# Stage 5: Web Build
# ===========================================
FROM build-deps AS web-builder
WORKDIR /app

# Copy web source code
COPY apps/web/src ./apps/web/src
COPY apps/web/public ./apps/web/public
COPY apps/web/vite.config.ts ./apps/web/
COPY apps/web/tsconfig.json ./apps/web/
COPY tsconfig.json ./

# Build arguments for web
ARG VITE_API_BASE_URL
ARG VITE_APP_VERSION
ARG VITE_BUILD_TIME

# Set environment variables
ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_BUILD_TIME=$VITE_BUILD_TIME
ENV NODE_ENV=production

# Build web application
RUN cd apps/web && npm run build

# ===========================================
# Stage 6: API Production Runtime
# ===========================================
FROM gcr.io/distroless/nodejs22-debian12:nonroot AS api-runtime
WORKDIR /app

USER nonroot

# Set environment variables
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=512"

# Copy production dependencies
COPY --from=deps --chown=nonroot:nonroot /app/node_modules ./node_modules

# Copy built API
COPY --from=api-builder --chown=nonroot:nonroot /app/apps/api/dist ./apps/api/dist
COPY --from=api-builder --chown=nonroot:nonroot /app/apps/api/prisma ./apps/api/prisma
COPY --from=api-builder --chown=nonroot:nonroot /app/apps/api/node_modules/.prisma ./apps/api/node_modules/.prisma

# Copy package.json
COPY --from=api-builder --chown=nonroot:nonroot /app/package.json ./package.json
COPY --from=api-builder --chown=nonroot:nonroot /app/apps/api/package.json ./apps/api/package.json

# Health check script
COPY --chown=nonroot:nonroot <<EOF /app/healthcheck.js
const http = require('http');
const options = {
  hostname: 'localhost',
  port: 4000,
  path: '/health',
  method: 'GET',
  timeout: 5000
};
const req = http.request(options, (res) => {
  process.exit(res.statusCode === 200 ? 0 : 1);
});
req.on('error', () => process.exit(1));
req.on('timeout', () => {
  req.destroy();
  process.exit(1);
});
req.end();
EOF

HEALTHCHECK --interval=30s --timeout=10s --start-period=15s --retries=3 \
    CMD ["node", "healthcheck.js"]

EXPOSE 4000

LABEL maintainer="sochi-travel-team" \
      version="1.0" \
      description="Sochi Travel API Backend"

CMD ["apps/api/dist/index.js"]

# ===========================================
# Stage 7: Web Production Runtime
# ===========================================
FROM nginx:1.25-alpine AS web-runtime

# Install additional tools
RUN apk add --no-cache \
    curl \
    brotli \
    gettext \
    && rm -rf /var/cache/apk/*

# Create nginx user
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy built web application
COPY --from=web-builder --chown=nextjs:nodejs /app/apps/web/dist /usr/share/nginx/html

# Copy nginx configuration
COPY --from=web-builder /app/apps/web/nginx.conf /etc/nginx/nginx.conf.template

# Create directories
RUN mkdir -p /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    chown -R nextjs:nodejs /var/cache/nginx /var/log/nginx /etc/nginx/conf.d

# Startup script
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf' >> /docker-entrypoint.sh && \
    echo 'exec nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

USER nextjs

EXPOSE 80 443

LABEL maintainer="sochi-travel-team" \
      version="1.0" \
      description="Sochi Travel Web Frontend"

ENTRYPOINT ["/docker-entrypoint.sh"]

