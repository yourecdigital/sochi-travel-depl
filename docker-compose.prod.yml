version: '3.8'

# Production Docker Compose configuration for Sochi Travel
# Usage: docker-compose -f docker-compose.prod.yml up -d

services:
  # ===========================================
  # Database Layer
  # ===========================================
  
  mariadb:
    image: mariadb:11.4.2
    container_name: sochi-travel-db-prod
    restart: unless-stopped
    
    # Security: No external port exposure
    ports: []
    
    # Security: Use secrets instead of environment variables
    environment:
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/db_root_password
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${DB_USER}
      MYSQL_PASSWORD_FILE: /run/secrets/db_password
      MYSQL_INITDB_SKIP_TZINFO: 1
      # Performance tuning
      MYSQL_INNODB_BUFFER_POOL_SIZE: 256M
      MYSQL_MAX_CONNECTIONS: 200
    
    # Security: Use secrets
    secrets:
      - db_root_password
      - db_password
    
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./scripts/mysql-prod.cnf:/etc/mysql/conf.d/production.cnf:ro
      - mariadb_logs:/var/log/mysql
    
    # Security: Container hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /var/run/mysqld:noexec,nosuid,size=100m
    
    # Security: User
    user: "999:999"
    
    # Security: Capabilities
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "healthcheck.sh", "--connect", "--innodb_initialized"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===========================================
  # Cache Layer
  # ===========================================
  
  redis:
    image: redis:7.2.4-alpine
    container_name: sochi-travel-redis-prod
    restart: unless-stopped
    
    # Security: No external port exposure
    ports: []
    
    command: >
      redis-server 
      --appendonly yes 
      --requirepass ${REDIS_PASSWORD}
      --maxmemory 128mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
    
    volumes:
      - redis_data:/data
      - ./scripts/redis-prod.conf:/usr/local/etc/redis/redis.conf:ro
    
    # Security: Container hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=50m
    
    # Security: User
    user: "999:999"
    
    # Security: Capabilities
    cap_drop:
      - ALL
    cap_add:
      - SETGID
      - SETUID
      - DAC_OVERRIDE
    
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "5m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # ===========================================
  # Storage Layer
  # ===========================================
  
  minio:
    image: minio/minio:latest
    container_name: sochi-travel-minio-prod
    restart: unless-stopped
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL:-http://localhost:9001}
    volumes:
      - minio_data:/data
      - ./scripts/minio-init.sh:/docker-entrypoint-initdb.d/minio-init.sh:ro
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - sochi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # ===========================================
  # Application Layer
  # ===========================================
  
  api:
    build:
      context: .
      dockerfile: apps/api/Dockerfile
      args:
        NODE_ENV: production
        API_VERSION: ${API_VERSION:-1.0.0}
        BUILD_TIME: ${BUILD_TIME}
    container_name: sochi-travel-api-prod
    restart: unless-stopped
    
    # Security: Use secrets for sensitive data
    environment:
      NODE_ENV: production
      DATABASE_URL: mysql://${DB_USER}:${DB_PASSWORD}@mariadb:3306/${DB_NAME}?connection_limit=20&pool_timeout=20
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379/0
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: ${MINIO_ROOT_USER}
      S3_SECRET_KEY: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET:-sochi-travel-uploads}
      API_PORT: 4000
      # Performance tuning
      NODE_OPTIONS: "--max-old-space-size=512"
      UV_THREADPOOL_SIZE: 16
    
    # Security: Use secrets
    secrets:
      - jwt_secret
      - refresh_secret
      - db_password
    
    depends_on:
      mariadb:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    
    # Security: No external port exposure
    ports: []
    
    # Security: Container hardening
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
      - /app/logs:noexec,nosuid,size=50m
    
    # Security: User
    user: "1001:1001"
    
    # Security: Capabilities
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    
    networks:
      - backend-network
    healthcheck:
      test: ["CMD", "node", "healthcheck.js"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    secrets:
      - jwt_secret
      - refresh_secret
      - db_password

  # ===========================================
  # Web Layer
  # ===========================================
  
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile.prod
      args:
        VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:4000}
        VITE_APP_VERSION: ${VITE_APP_VERSION:-1.0.0}
        VITE_BUILD_TIME: ${VITE_BUILD_TIME}
    container_name: sochi-travel-web-prod
    restart: unless-stopped
    environment:
      VITE_API_BASE_URL: ${VITE_API_BASE_URL:-http://localhost:4000}
      NGINX_WORKER_PROCESSES: auto
      NGINX_WORKER_CONNECTIONS: 1024
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.production.conf:/etc/nginx/nginx.production.conf:ro
      - web_logs:/var/log/nginx
      - web_cache:/var/cache/nginx
    networks:
      - sochi-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
        reservations:
          memory: 128M
          cpus: '0.1'

  # ===========================================
  # Monitoring Layer (Optional)
  # ===========================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: sochi-travel-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - sochi-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: sochi-travel-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - sochi-network
    profiles:
      - monitoring

# ===========================================
# Volumes
# ===========================================

volumes:
  mariadb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sochi-travel/data/mariadb
  mariadb_logs:
    driver: local
  redis_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sochi-travel/data/redis
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sochi-travel/data/minio
  web_logs:
    driver: local
  web_cache:
    driver: local
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sochi-travel/data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /opt/sochi-travel/data/grafana

# ===========================================
# Networks
# ===========================================

networks:
  frontend-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
  backend-network:
    driver: bridge
    internal: true
    ipam:
      config:
        - subnet: 172.21.0.0/16

# ===========================================
# Secrets (for production)
# ===========================================

secrets:
  jwt_secret:
    file: ./secrets/jwt_secret.txt
  refresh_secret:
    file: ./secrets/refresh_secret.txt
  db_password:
    file: ./secrets/db_password.txt

