#!/bin/bash

# Sochi Travel - Vulnerability Scanning Script
# Usage: ./security/vulnerability-scan.sh

set -euo pipefail

# Configuration
PROJECT_DIR="/opt/sochi-travel"
LOG_FILE="/var/log/sochi-travel-vuln-scan.log"
REPORT_DIR="/opt/sochi-travel/security/reports"
SCAN_DATE=$(date +%Y%m%d_%H%M%S)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${GREEN}[$timestamp] $message${NC}"
    echo "[$timestamp] $message" >> "$LOG_FILE"
}

warn() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${YELLOW}[$timestamp] WARNING: $message${NC}"
    echo "[$timestamp] WARNING: $message" >> "$LOG_FILE"
}

error() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${RED}[$timestamp] ERROR: $message${NC}"
    echo "[$timestamp] ERROR: $message" >> "$LOG_FILE"
}

info() {
    local message="$1"
    local timestamp=$(date '+%Y-%m-%d %H:%M:%S')
    echo -e "${BLUE}[$timestamp] INFO: $message${NC}"
    echo "[$timestamp] INFO: $message" >> "$LOG_FILE"
}

install_trivy() {
    log "Installing Trivy vulnerability scanner..."
    
    if ! command -v trivy &> /dev/null; then
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
        log "Trivy installed successfully"
    else
        log "Trivy already installed"
    fi
}

install_snyk() {
    log "Installing Snyk vulnerability scanner..."
    
    if ! command -v snyk &> /dev/null; then
        npm install -g snyk
        log "Snyk installed successfully"
    else
        log "Snyk already installed"
    fi
}

scan_docker_images() {
    log "Scanning Docker images for vulnerabilities..."
    
    local report_file="$REPORT_DIR/docker-vuln-scan-$SCAN_DATE.json"
    
    {
        echo "=== DOCKER IMAGE VULNERABILITY SCAN ==="
        echo "Scan Date: $(date)"
        echo ""
        
        # Scan API image
        echo "Scanning API image..."
        trivy image --format json --output "$report_file" sochi-travel-api:latest || true
        trivy image sochi-travel-api:latest
        
        echo ""
        echo "Scanning Web image..."
        trivy image sochi-travel-web:latest
        
        echo ""
        echo "Scanning MariaDB image..."
        trivy image mariadb:11.4.2
        
        echo ""
        echo "Scanning Redis image..."
        trivy image redis:7.2.4-alpine
        
        echo ""
        echo "Scanning MinIO image..."
        trivy image minio/minio:latest
        
    } > "$report_file"
    
    log "Docker image scan completed. Report: $report_file"
}

scan_dependencies() {
    log "Scanning dependencies for vulnerabilities..."
    
    local report_file="$REPORT_DIR/deps-vuln-scan-$SCAN_DATE.json"
    
    {
        echo "=== DEPENDENCY VULNERABILITY SCAN ==="
        echo "Scan Date: $(date)"
        echo ""
        
        cd "$PROJECT_DIR"
        
        echo "NPM Audit Results:"
        npm audit --json > "$report_file" 2>/dev/null || true
        npm audit
        
        echo ""
        echo "Snyk Scan Results:"
        if command -v snyk &> /dev/null; then
            snyk test --json > "$report_file" 2>/dev/null || true
            snyk test
        else
            echo "Snyk not available"
        fi
        
    } > "$report_file"
    
    log "Dependency scan completed. Report: $report_file"
}

scan_filesystem() {
    log "Scanning filesystem for vulnerabilities..."
    
    local report_file="$REPORT_DIR/fs-vuln-scan-$SCAN_DATE.json"
    
    {
        echo "=== FILESYSTEM VULNERABILITY SCAN ==="
        echo "Scan Date: $(date)"
        echo ""
        
        cd "$PROJECT_DIR"
        
        echo "Filesystem scan results:"
        trivy fs --format json --output "$report_file" . || true
        trivy fs .
        
    } > "$report_file"
    
    log "Filesystem scan completed. Report: $report_file"
}

scan_running_containers() {
    log "Scanning running containers for vulnerabilities..."
    
    local report_file="$REPORT_DIR/containers-vuln-scan-$SCAN_DATE.json"
    
    {
        echo "=== RUNNING CONTAINERS VULNERABILITY SCAN ==="
        echo "Scan Date: $(date)"
        echo ""
        
        # Get running containers
        local containers=$(docker ps --format "{{.Names}}")
        
        for container in $containers; do
            echo "Scanning container: $container"
            trivy container --format json --output "$report_file" "$container" || true
            trivy container "$container"
            echo ""
        done
        
    } > "$report_file"
    
    log "Running containers scan completed. Report: $report_file"
}

check_security_configurations() {
    log "Checking security configurations..."
    
    local report_file="$REPORT_DIR/security-config-$SCAN_DATE.txt"
    
    {
        echo "=== SECURITY CONFIGURATION CHECK ==="
        echo "Scan Date: $(date)"
        echo ""
        
        echo "Docker Security Configuration:"
        echo "=============================="
        
        # Check Docker daemon configuration
        if [[ -f "/etc/docker/daemon.json" ]]; then
            echo "Docker daemon.json:"
            cat /etc/docker/daemon.json
        else
            echo "No daemon.json found"
        fi
        
        echo ""
        echo "Container Security Status:"
        echo "========================="
        
        # Check running containers security
        docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" | while read -r line; do
            echo "$line"
        done
        
        echo ""
        echo "Network Security:"
        echo "================="
        
        # Check network configuration
        docker network ls
        docker network inspect sochi-travel-network 2>/dev/null || echo "Network not found"
        
        echo ""
        echo "Volume Security:"
        echo "================"
        
        # Check volume configuration
        docker volume ls
        docker volume inspect sochi-travel-data 2>/dev/null || echo "Volume not found"
        
        echo ""
        echo "Security Policies:"
        echo "=================="
        
        # Check UFW status
        ufw status verbose
        
        echo ""
        # Check Fail2ban status
        systemctl status fail2ban --no-pager
        
    } > "$report_file"
    
    log "Security configuration check completed. Report: $report_file"
}

generate_vulnerability_report() {
    log "Generating comprehensive vulnerability report..."
    
    local report_file="$REPORT_DIR/vulnerability-report-$SCAN_DATE.md"
    
    {
        echo "# Sochi Travel Vulnerability Scan Report"
        echo "**Generated**: $(date)"
        echo "**Scanner**: Trivy + Snyk + Custom Checks"
        echo ""
        echo "## Executive Summary"
        echo ""
        echo "| Component | Status | Critical | High | Medium | Low | Total |"
        echo "|-----------|--------|----------|------|--------|-----|-------|"
        
        # Count vulnerabilities from reports
        local critical_count=0
        local high_count=0
        local medium_count=0
        local low_count=0
        
        # Parse Trivy results
        if [[ -f "$REPORT_DIR/docker-vuln-scan-$SCAN_DATE.json" ]]; then
            critical_count=$((critical_count + $(grep -c '"Severity":"CRITICAL"' "$REPORT_DIR/docker-vuln-scan-$SCAN_DATE.json" 2>/dev/null || echo 0)))
            high_count=$((high_count + $(grep -c '"Severity":"HIGH"' "$REPORT_DIR/docker-vuln-scan-$SCAN_DATE.json" 2>/dev/null || echo 0)))
            medium_count=$((medium_count + $(grep -c '"Severity":"MEDIUM"' "$REPORT_DIR/docker-vuln-scan-$SCAN_DATE.json" 2>/dev/null || echo 0)))
            low_count=$((low_count + $(grep -c '"Severity":"LOW"' "$REPORT_DIR/docker-vuln-scan-$SCAN_DATE.json" 2>/dev/null || echo 0)))
        fi
        
        local total_count=$((critical_count + high_count + medium_count + low_count))
        
        echo "| Docker Images | $([ $critical_count -gt 0 ] && echo "‚ùå CRITICAL" || echo "‚úÖ SECURE") | $critical_count | $high_count | $medium_count | $low_count | $total_count |"
        echo ""
        
        echo "## Detailed Findings"
        echo ""
        echo "### Critical Vulnerabilities ($critical_count)"
        if [[ $critical_count -gt 0 ]]; then
            echo "üö® **IMMEDIATE ACTION REQUIRED**"
            echo ""
            echo "Critical vulnerabilities found that require immediate patching:"
            echo "- Update base images to latest versions"
            echo "- Apply security patches immediately"
            echo "- Review and update dependencies"
        else
            echo "‚úÖ No critical vulnerabilities found"
        fi
        
        echo ""
        echo "### High Vulnerabilities ($high_count)"
        if [[ $high_count -gt 0 ]]; then
            echo "‚ö†Ô∏è **HIGH PRIORITY**"
            echo ""
            echo "High severity vulnerabilities that should be addressed within 7 days:"
            echo "- Review security advisories"
            echo "- Plan security updates"
            echo "- Monitor for patches"
        else
            echo "‚úÖ No high vulnerabilities found"
        fi
        
        echo ""
        echo "### Recommendations"
        echo ""
        echo "1. **Immediate Actions**:"
        echo "   - Update all base images to latest versions"
        echo "   - Apply security patches for critical vulnerabilities"
        echo "   - Review and update all dependencies"
        echo ""
        echo "2. **Short-term Actions**:"
        echo "   - Implement automated vulnerability scanning"
        echo "   - Set up security monitoring"
        echo "   - Create security update procedures"
        echo ""
        echo "3. **Long-term Actions**:"
        echo "   - Implement security-first development practices"
        echo "   - Regular security audits"
        echo "   - Security training for development team"
        
    } > "$report_file"
    
    log "Vulnerability report generated: $report_file"
}

setup_automated_scanning() {
    log "Setting up automated vulnerability scanning..."
    
    # Create systemd service for automated scanning
    sudo tee /etc/systemd/system/sochi-travel-vuln-scan.service > /dev/null << EOF
[Unit]
Description=Sochi Travel Vulnerability Scan
After=network.target

[Service]
Type=oneshot
User=deploy
Group=deploy
WorkingDirectory=$PROJECT_DIR
ExecStart=$PROJECT_DIR/security/vulnerability-scan.sh
StandardOutput=journal
StandardError=journal
EOF

    # Create timer for weekly scans
    sudo tee /etc/systemd/system/sochi-travel-vuln-scan.timer > /dev/null << EOF
[Unit]
Description=Run Sochi Travel vulnerability scan weekly
Requires=sochi-travel-vuln-scan.service

[Timer]
OnCalendar=weekly
Persistent=true

[Install]
WantedBy=timers.target
EOF

    # Enable and start timer
    sudo systemctl daemon-reload
    sudo systemctl enable sochi-travel-vuln-scan.timer
    sudo systemctl start sochi-travel-vuln-scan.timer
    
    log "Automated vulnerability scanning configured"
}

main() {
    log "Starting Sochi Travel vulnerability scanning"
    
    # Create reports directory
    mkdir -p "$REPORT_DIR"
    
    install_trivy
    install_snyk
    scan_docker_images
    scan_dependencies
    scan_filesystem
    scan_running_containers
    check_security_configurations
    generate_vulnerability_report
    setup_automated_scanning
    
    log "Vulnerability scanning completed successfully! üõ°Ô∏è"
    
    echo ""
    info "Vulnerability Scan Summary:"
    echo "  üìä Reports generated in: $REPORT_DIR"
    echo "  üîç Docker images scanned"
    echo "  üì¶ Dependencies audited"
    echo "  üóÇÔ∏è Filesystem scanned"
    echo "  üê≥ Running containers checked"
    echo "  ‚öôÔ∏è Security configurations verified"
    echo "  ü§ñ Automated scanning configured"
}

main "$@"
