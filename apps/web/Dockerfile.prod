# syntax=docker/dockerfile:1.7-labs

# ===========================================
# Stage 1: Dependencies
# ===========================================
FROM node:22-alpine AS deps
WORKDIR /app

# Install system dependencies
RUN apk add --no-cache libc6-compat

# Copy package files
COPY package.json package-lock.json ./
COPY apps/web/package.json ./apps/web/
COPY apps/api/package.json ./apps/api/

# Install dependencies with cache mount
RUN --mount=type=cache,target=/root/.npm \
    npm ci --only=production --ignore-scripts

# ===========================================
# Stage 2: Build
# ===========================================
FROM node:22-alpine AS builder
WORKDIR /app

# Install build dependencies
RUN apk add --no-cache libc6-compat

# Copy package files
COPY package.json package-lock.json ./
COPY apps/web/package.json ./apps/web/
COPY apps/api/package.json ./apps/api/

# Install all dependencies (including dev)
RUN --mount=type=cache,target=/root/.npm \
    npm ci

# Copy source code
COPY apps/web ./apps/web
COPY tsconfig.json ./

# Build arguments for environment variables
ARG VITE_API_BASE_URL
ARG VITE_APP_VERSION
ARG VITE_BUILD_TIME

# Set environment variables
ENV VITE_API_BASE_URL=$VITE_API_BASE_URL
ENV VITE_APP_VERSION=$VITE_APP_VERSION
ENV VITE_BUILD_TIME=$VITE_BUILD_TIME
ENV NODE_ENV=production

# Build the application
RUN cd apps/web && npm run build

# ===========================================
# Stage 3: Production runtime
# ===========================================
FROM nginx:1.25-alpine AS runtime

# Install additional tools for health checks and optimization
RUN apk add --no-cache \
    curl \
    brotli \
    gettext \
    && rm -rf /var/cache/apk/*

# Create nginx user and directories
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/apps/web/dist /usr/share/nginx/html

# Copy nginx configuration
COPY --from=builder /app/apps/web/nginx.conf /etc/nginx/nginx.conf.template

# Copy custom production nginx config
COPY nginx.production.conf /etc/nginx/nginx.production.conf

# Create directories for logs and cache
RUN mkdir -p /var/cache/nginx /var/log/nginx /etc/nginx/conf.d && \
    chown -R nextjs:nodejs /var/cache/nginx /var/log/nginx /etc/nginx/conf.d

# Create startup script for environment variable substitution
RUN echo '#!/bin/sh' > /docker-entrypoint.sh && \
    echo 'envsubst < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf' >> /docker-entrypoint.sh && \
    echo 'exec nginx -g "daemon off;"' >> /docker-entrypoint.sh && \
    chmod +x /docker-entrypoint.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/health || exit 1

# Security: Run as non-root user
USER nextjs

# Expose ports
EXPOSE 80 443

# Labels for better container management
LABEL maintainer="sochi-travel-team" \
      version="1.0" \
      description="Sochi Travel Web Frontend"

# Start nginx
ENTRYPOINT ["/docker-entrypoint.sh"]

